//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/azuri_hirohinata/Desktop/ANTLR/StudyANTLR2/VisualBasic/VisualBasic.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class VisualBasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PLUS=1, MINUS=2, ASTERISK=3, SLASH=4, HAT=5, LT=6, GT=7, LE=8, GE=9, EQ=10, 
		NEQ=11, ASSIGN=12, OUTREF=13, DOT=14, COMMA=15, OPEN_PAREN=16, CLOSE_PAREN=17, 
		COLON=18, OPEN_BRACKET=19, CLOSE_BRACKET=20, OR=21, XOR=22, AND=23, MOD=24, 
		NOT=25, END=26, SELECT=27, CASE=28, TO=29, IS=30, DO=31, UNTIL=32, DOT_NUMBER=33, 
		DEC_NUMBER=34, HEX_NUMBER=35, REAL_NUMBER=36, STRING=37, NULL=38, IDENTIFIER=39, 
		WS=40, EOL=41, LINE_COMMENT=42;
	public const int
		RULE_input = 0, RULE_stmtList = 1, RULE_stmt = 2, RULE_assignStmt = 3, 
		RULE_subprogCtrlStmt = 4, RULE_expression = 5, RULE_orExpr = 6, RULE_andExpr = 7, 
		RULE_notExpr = 8, RULE_compareExpr = 9, RULE_addExpr = 10, RULE_modExpr = 11, 
		RULE_term = 12, RULE_unaryExpr = 13, RULE_powerExpr = 14, RULE_primaryExpr = 15, 
		RULE_constant = 16, RULE_variableAccess = 17, RULE_variable = 18, RULE_variableName = 19, 
		RULE_funcCall = 20, RULE_funcAccess = 21, RULE_paramAssign = 22;
	public static readonly string[] ruleNames = {
		"input", "stmtList", "stmt", "assignStmt", "subprogCtrlStmt", "expression", 
		"orExpr", "andExpr", "notExpr", "compareExpr", "addExpr", "modExpr", "term", 
		"unaryExpr", "powerExpr", "primaryExpr", "constant", "variableAccess", 
		"variable", "variableName", "funcCall", "funcAccess", "paramAssign"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'^'", "'<'", "'>'", "'<='", "'>='", 
		"'='", "'<>'", "':='", "'=>'", "'.'", "','", "'('", "')'", "':'", "'['", 
		"']'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'???'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PLUS", "MINUS", "ASTERISK", "SLASH", "HAT", "LT", "GT", "LE", "GE", 
		"EQ", "NEQ", "ASSIGN", "OUTREF", "DOT", "COMMA", "OPEN_PAREN", "CLOSE_PAREN", 
		"COLON", "OPEN_BRACKET", "CLOSE_BRACKET", "OR", "XOR", "AND", "MOD", "NOT", 
		"END", "SELECT", "CASE", "TO", "IS", "DO", "UNTIL", "DOT_NUMBER", "DEC_NUMBER", 
		"HEX_NUMBER", "REAL_NUMBER", "STRING", "NULL", "IDENTIFIER", "WS", "EOL", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VisualBasic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static VisualBasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VisualBasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VisualBasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public StmtListContext stmtList() {
			return GetRuleContext<StmtListContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(VisualBasicParser.Eof, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; stmtList();
			State = 47; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtListContext : ParserRuleContext {
		public ITerminalNode[] EOL() { return GetTokens(VisualBasicParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(VisualBasicParser.EOL, i);
		}
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtListContext stmtList() {
		StmtListContext _localctx = new StmtListContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmtList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER || _la==EOL) {
				{
				{
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 49; stmt();
					}
				}

				State = 52; Match(EOL);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public AssignStmtContext assignStmt() {
			return GetRuleContext<AssignStmtContext>(0);
		}
		public SubprogCtrlStmtContext subprogCtrlStmt() {
			return GetRuleContext<SubprogCtrlStmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; assignStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; subprogCtrlStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStmtContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VisualBasicParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStmtContext assignStmt() {
		AssignStmtContext _localctx = new AssignStmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; variable();
			State = 63; Match(ASSIGN);
			State = 64; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogCtrlStmtContext : ParserRuleContext {
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public SubprogCtrlStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogCtrlStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogCtrlStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogCtrlStmtContext subprogCtrlStmt() {
		SubprogCtrlStmtContext _localctx = new SubprogCtrlStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_subprogCtrlStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; funcCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public OrExprContext lhs;
		public IToken operand;
		public OrExprContext rhs;
		public OrExprContext[] orExpr() {
			return GetRuleContexts<OrExprContext>();
		}
		public OrExprContext orExpr(int i) {
			return GetRuleContext<OrExprContext>(i);
		}
		public ITerminalNode[] XOR() { return GetTokens(VisualBasicParser.XOR); }
		public ITerminalNode XOR(int i) {
			return GetToken(VisualBasicParser.XOR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; _localctx.lhs = orExpr();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==XOR) {
				{
				{
				State = 69; _localctx.operand = Match(XOR);
				State = 70; _localctx.rhs = orExpr();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public AndExprContext lhs;
		public IToken operand;
		public AndExprContext rhs;
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(VisualBasicParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(VisualBasicParser.OR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; _localctx.lhs = andExpr();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 77; _localctx.operand = Match(OR);
				State = 78; _localctx.rhs = andExpr();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public NotExprContext lhs;
		public IToken operand;
		public NotExprContext rhs;
		public NotExprContext[] notExpr() {
			return GetRuleContexts<NotExprContext>();
		}
		public NotExprContext notExpr(int i) {
			return GetRuleContext<NotExprContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(VisualBasicParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(VisualBasicParser.AND, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; _localctx.lhs = notExpr();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 85; _localctx.operand = Match(AND);
				State = 86; _localctx.rhs = notExpr();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExprContext : ParserRuleContext {
		public IToken operand;
		public CompareExprContext rhs;
		public CompareExprContext compareExpr() {
			return GetRuleContext<CompareExprContext>(0);
		}
		public ITerminalNode[] NOT() { return GetTokens(VisualBasicParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(VisualBasicParser.NOT, i);
		}
		public NotExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExprContext notExpr() {
		NotExprContext _localctx = new NotExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_notExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NOT) {
				{
				{
				State = 92; _localctx.operand = Match(NOT);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98; _localctx.rhs = compareExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExprContext : ParserRuleContext {
		public AddExprContext lhs;
		public IToken operand;
		public AddExprContext rhs;
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode[] EQ() { return GetTokens(VisualBasicParser.EQ); }
		public ITerminalNode EQ(int i) {
			return GetToken(VisualBasicParser.EQ, i);
		}
		public ITerminalNode[] NEQ() { return GetTokens(VisualBasicParser.NEQ); }
		public ITerminalNode NEQ(int i) {
			return GetToken(VisualBasicParser.NEQ, i);
		}
		public ITerminalNode[] LT() { return GetTokens(VisualBasicParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(VisualBasicParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(VisualBasicParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(VisualBasicParser.GT, i);
		}
		public ITerminalNode[] LE() { return GetTokens(VisualBasicParser.LE); }
		public ITerminalNode LE(int i) {
			return GetToken(VisualBasicParser.LE, i);
		}
		public ITerminalNode[] GE() { return GetTokens(VisualBasicParser.GE); }
		public ITerminalNode GE(int i) {
			return GetToken(VisualBasicParser.GE, i);
		}
		public CompareExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExprContext compareExpr() {
		CompareExprContext _localctx = new CompareExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_compareExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; _localctx.lhs = addExpr();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << LE) | (1L << GE) | (1L << EQ) | (1L << NEQ))) != 0)) {
				{
				{
				State = 101;
				_localctx.operand = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << LE) | (1L << GE) | (1L << EQ) | (1L << NEQ))) != 0)) ) {
					_localctx.operand = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 102; _localctx.rhs = addExpr();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public ModExprContext lhs;
		public IToken operand;
		public ModExprContext rhs;
		public ModExprContext[] modExpr() {
			return GetRuleContexts<ModExprContext>();
		}
		public ModExprContext modExpr(int i) {
			return GetRuleContext<ModExprContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(VisualBasicParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(VisualBasicParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(VisualBasicParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(VisualBasicParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; _localctx.lhs = modExpr();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 109;
				_localctx.operand = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.operand = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 110; _localctx.rhs = modExpr();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModExprContext : ParserRuleContext {
		public TermContext lhs;
		public IToken operand;
		public TermContext rhs;
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] MOD() { return GetTokens(VisualBasicParser.MOD); }
		public ITerminalNode MOD(int i) {
			return GetToken(VisualBasicParser.MOD, i);
		}
		public ModExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModExprContext modExpr() {
		ModExprContext _localctx = new ModExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_modExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; _localctx.lhs = term();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MOD) {
				{
				{
				State = 117; _localctx.operand = Match(MOD);
				State = 118; _localctx.rhs = term();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public UnaryExprContext lhs;
		public IToken operand;
		public UnaryExprContext rhs;
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public ITerminalNode[] ASTERISK() { return GetTokens(VisualBasicParser.ASTERISK); }
		public ITerminalNode ASTERISK(int i) {
			return GetToken(VisualBasicParser.ASTERISK, i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(VisualBasicParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(VisualBasicParser.SLASH, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 24, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; _localctx.lhs = unaryExpr();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ASTERISK || _la==SLASH) {
				{
				{
				State = 125;
				_localctx.operand = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASTERISK || _la==SLASH) ) {
					_localctx.operand = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 126; _localctx.rhs = unaryExpr();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public IToken operand;
		public PowerExprContext rhs;
		public PowerExprContext powerExpr() {
			return GetRuleContext<PowerExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VisualBasicParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(VisualBasicParser.PLUS, 0); }
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_unaryExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 132;
				_localctx.operand = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.operand = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 135; _localctx.rhs = powerExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerExprContext : ParserRuleContext {
		public PrimaryExprContext lhs;
		public IToken operand;
		public PrimaryExprContext rhs;
		public PrimaryExprContext[] primaryExpr() {
			return GetRuleContexts<PrimaryExprContext>();
		}
		public PrimaryExprContext primaryExpr(int i) {
			return GetRuleContext<PrimaryExprContext>(i);
		}
		public ITerminalNode[] HAT() { return GetTokens(VisualBasicParser.HAT); }
		public ITerminalNode HAT(int i) {
			return GetToken(VisualBasicParser.HAT, i);
		}
		public PowerExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powerExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowerExprContext powerExpr() {
		PowerExprContext _localctx = new PowerExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_powerExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; _localctx.lhs = primaryExpr();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HAT) {
				{
				{
				State = 138; _localctx.operand = Match(HAT);
				State = 139; _localctx.rhs = primaryExpr();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public VariableAccessContext variableAccess() {
			return GetRuleContext<VariableAccessContext>(0);
		}
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ITerminalNode OPEN_PAREN() { return GetToken(VisualBasicParser.OPEN_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(VisualBasicParser.CLOSE_PAREN, 0); }
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_primaryExpr);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; variableAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147; funcCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 148; Match(OPEN_PAREN);
				State = 149; expression();
				State = 150; Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode DEC_NUMBER() { return GetToken(VisualBasicParser.DEC_NUMBER, 0); }
		public ITerminalNode HEX_NUMBER() { return GetToken(VisualBasicParser.HEX_NUMBER, 0); }
		public ITerminalNode REAL_NUMBER() { return GetToken(VisualBasicParser.REAL_NUMBER, 0); }
		public ITerminalNode DOT_NUMBER() { return GetToken(VisualBasicParser.DOT_NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(VisualBasicParser.STRING, 0); }
		public ITerminalNode NULL() { return GetToken(VisualBasicParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 32, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOT_NUMBER) | (1L << DEC_NUMBER) | (1L << HEX_NUMBER) | (1L << REAL_NUMBER) | (1L << STRING) | (1L << NULL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAccessContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VariableAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAccess; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAccessContext variableAccess() {
		VariableAccessContext _localctx = new VariableAccessContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 36, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VisualBasicParser.IDENTIFIER, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public ParamAssignContext args;
		public FuncAccessContext funcAccess() {
			return GetRuleContext<FuncAccessContext>(0);
		}
		public ITerminalNode OPEN_PAREN() { return GetToken(VisualBasicParser.OPEN_PAREN, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(VisualBasicParser.CLOSE_PAREN, 0); }
		public ParamAssignContext[] paramAssign() {
			return GetRuleContexts<ParamAssignContext>();
		}
		public ParamAssignContext paramAssign(int i) {
			return GetRuleContext<ParamAssignContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasicParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasicParser.COMMA, i);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 40, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; funcAccess();
			State = 163; Match(OPEN_PAREN);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << OPEN_PAREN) | (1L << NOT) | (1L << DOT_NUMBER) | (1L << DEC_NUMBER) | (1L << HEX_NUMBER) | (1L << REAL_NUMBER) | (1L << STRING) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 164; _localctx.args = paramAssign();
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 165; Match(COMMA);
					State = 166; _localctx.args = paramAssign();
					}
					}
					State = 171;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 174; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncAccessContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VisualBasicParser.IDENTIFIER, 0); }
		public FuncAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcAccess; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncAccessContext funcAccess() {
		FuncAccessContext _localctx = new FuncAccessContext(Context, State);
		EnterRule(_localctx, 42, RULE_funcAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamAssignContext : ParserRuleContext {
		public ParamAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramAssign; } }
	 
		public ParamAssignContext() { }
		public virtual void CopyFrom(ParamAssignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InParamAssignContext : ParamAssignContext {
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VisualBasicParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InParamAssignContext(ParamAssignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInParamAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OutParamAssignContext : ParamAssignContext {
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VisualBasicParser.ASSIGN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(VisualBasicParser.NOT, 0); }
		public OutParamAssignContext(ParamAssignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutParamAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamelessParamAssignContext : ParamAssignContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NamelessParamAssignContext(ParamAssignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasicVisitor<TResult> typedVisitor = visitor as IVisualBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelessParamAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamAssignContext paramAssign() {
		ParamAssignContext _localctx = new ParamAssignContext(Context, State);
		EnterRule(_localctx, 44, RULE_paramAssign);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new NamelessParamAssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 178; expression();
				}
				break;
			case 2:
				_localctx = new InParamAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; variableName();
				State = 180; Match(ASSIGN);
				State = 181; expression();
				}
				break;
			case 3:
				_localctx = new OutParamAssignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 183; Match(NOT);
					}
				}

				State = 186; variableName();
				State = 187; Match(ASSIGN);
				State = 188; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\xC3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x5', 
		'\x3', '\x35', '\n', '\x3', '\x3', '\x3', '\a', '\x3', '\x38', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', ';', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '?', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', 'J', '\n', '\a', '\f', '\a', '\xE', '\a', 'M', '\v', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'R', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 'U', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', 'Z', '\n', '\t', '\f', '\t', '\xE', '\t', ']', '\v', 
		'\t', '\x3', '\n', '\a', '\n', '`', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\x63', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', 'j', '\n', '\v', '\f', '\v', '\xE', '\v', 'm', 
		'\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 'r', '\n', 
		'\f', '\f', '\f', '\xE', '\f', 'u', '\v', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', 'z', '\n', '\r', '\f', '\r', '\xE', '\r', '}', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x82', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x85', '\v', '\xE', '\x3', '\xF', 
		'\x5', '\xF', '\x88', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x8F', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x92', '\v', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x9B', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\xAA', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\xAD', '\v', '\x16', '\x5', '\x16', '\xAF', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\xBB', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\xC1', '\n', '\x18', '\x3', '\x18', '\x2', 
		'\x2', '\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x2', '\x6', '\x3', '\x2', '\b', '\r', '\x3', '\x2', '\x3', 
		'\x4', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', '#', '(', '\x2', '\xC0', 
		'\x2', '\x30', '\x3', '\x2', '\x2', '\x2', '\x4', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '>', '\x3', '\x2', '\x2', '\x2', '\b', '@', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x44', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'N', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'V', '\x3', '\x2', '\x2', '\x2', '\x12', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x66', '\x3', '\x2', '\x2', '\x2', '\x16', 'n', '\x3', 
		'\x2', '\x2', '\x2', '\x18', 'v', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x8B', '\x3', '\x2', '\x2', '\x2', ' ', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x9C', '\x3', '\x2', '\x2', '\x2', '$', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xA0', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '*', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', ',', '\xB2', '\x3', '\x2', '\x2', '\x2', '.', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x5', '\x4', '\x3', '\x2', '\x31', '\x32', 
		'\a', '\x2', '\x2', '\x3', '\x32', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x35', '\x5', '\x6', '\x4', '\x2', '\x34', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\a', '+', '\x2', '\x2', '\x37', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x5', '\x3', '\x2', '\x2', '\x2', ';', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '<', '?', '\x5', '\b', '\x5', '\x2', '=', 
		'?', '\x5', '\n', '\x6', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\a', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\x5', '&', '\x14', '\x2', '\x41', '\x42', '\a', '\xE', 
		'\x2', '\x2', '\x42', '\x43', '\x5', '\f', '\a', '\x2', '\x43', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x5', '*', '\x16', '\x2', 
		'\x45', '\v', '\x3', '\x2', '\x2', '\x2', '\x46', 'K', '\x5', '\xE', '\b', 
		'\x2', 'G', 'H', '\a', '\x18', '\x2', '\x2', 'H', 'J', '\x5', '\xE', '\b', 
		'\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'L', '\r', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'S', '\x5', '\x10', '\t', '\x2', 'O', 'P', '\a', '\x17', 
		'\x2', '\x2', 'P', 'R', '\x5', '\x10', '\t', '\x2', 'Q', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', '[', '\x5', 
		'\x12', '\n', '\x2', 'W', 'X', '\a', '\x19', '\x2', '\x2', 'X', 'Z', '\x5', 
		'\x12', '\n', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x11', '\x3', '\x2', '\x2', '\x2', 
		']', '[', '\x3', '\x2', '\x2', '\x2', '^', '`', '\a', '\x1B', '\x2', '\x2', 
		'_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x5', '\x14', '\v', 
		'\x2', '\x65', '\x13', '\x3', '\x2', '\x2', '\x2', '\x66', 'k', '\x5', 
		'\x16', '\f', '\x2', 'g', 'h', '\t', '\x2', '\x2', '\x2', 'h', 'j', '\x5', 
		'\x16', '\f', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', '\x15', '\x3', '\x2', '\x2', '\x2', 'm', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'n', 's', '\x5', '\x18', '\r', '\x2', 'o', 
		'p', '\t', '\x3', '\x2', '\x2', 'p', 'r', '\x5', '\x18', '\r', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '\x17', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'v', '{', '\x5', '\x1A', '\xE', '\x2', 'w', 'x', '\a', '\x1A', 
		'\x2', '\x2', 'x', 'z', '\x5', '\x1A', '\xE', '\x2', 'y', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', 
		'\x83', '\x5', '\x1C', '\xF', '\x2', '\x7F', '\x80', '\t', '\x4', '\x2', 
		'\x2', '\x80', '\x82', '\x5', '\x1C', '\xF', '\x2', '\x81', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x88', '\t', '\x3', '\x2', '\x2', '\x87', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x5', 
		'\x1E', '\x10', '\x2', '\x8A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x90', '\x5', ' ', '\x11', '\x2', '\x8C', '\x8D', '\a', '\a', '\x2', 
		'\x2', '\x8D', '\x8F', '\x5', ' ', '\x11', '\x2', '\x8E', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x9B', '\x5', '\"', '\x12', '\x2', '\x94', 
		'\x9B', '\x5', '$', '\x13', '\x2', '\x95', '\x9B', '\x5', '*', '\x16', 
		'\x2', '\x96', '\x97', '\a', '\x12', '\x2', '\x2', '\x97', '\x98', '\x5', 
		'\f', '\a', '\x2', '\x98', '\x99', '\a', '\x13', '\x2', '\x2', '\x99', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x94', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\t', '\x5', '\x2', '\x2', 
		'\x9D', '#', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x5', '&', '\x14', 
		'\x2', '\x9F', '%', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x5', 
		'(', '\x15', '\x2', '\xA1', '\'', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\a', ')', '\x2', '\x2', '\xA3', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA5', '\x5', ',', '\x17', '\x2', '\xA5', '\xAE', '\a', '\x12', 
		'\x2', '\x2', '\xA6', '\xAB', '\x5', '.', '\x18', '\x2', '\xA7', '\xA8', 
		'\a', '\x11', '\x2', '\x2', '\xA8', '\xAA', '\x5', '.', '\x18', '\x2', 
		'\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x13', '\x2', '\x2', 
		'\xB1', '+', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\a', ')', '\x2', 
		'\x2', '\xB3', '-', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xC1', '\x5', 
		'\f', '\a', '\x2', '\xB5', '\xB6', '\x5', '(', '\x15', '\x2', '\xB6', 
		'\xB7', '\a', '\xE', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\f', '\a', 
		'\x2', '\xB8', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBB', '\a', 
		'\x1B', '\x2', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x5', '(', '\x15', '\x2', '\xBD', '\xBE', '\a', 
		'\xE', '\x2', '\x2', '\xBE', '\xBF', '\x5', '&', '\x14', '\x2', '\xBF', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '/', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x34', '\x39', '>', 'K', 'S', '[', '\x61', 'k', 's', '{', '\x83', '\x87', 
		'\x90', '\x9A', '\xAB', '\xAE', '\xBA', '\xC0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
